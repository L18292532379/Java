public class MyStack {
    private int[] elem;
    private  int top;//既可以指定下标，也可以代表栈内数量

    public  MyStack() {
        this.elem = new int[5];
    }

    public boolean isFull() {
        return this.top == this.elem.length;
    }

    public  int push(int itme) {
        if (isFull()){
            //return -1;
            throw new RuntimeException("栈为满");
        }
        this.elem[this.top] = itme;
        this.top++;
        return this.elem[this.top-1];
    }

    /**
     * 弹出栈顶元素，删除
     * @return
     */
    public int pop(){
        if (empty()) {
            //return -1;
            throw new RuntimeException("栈为空");
        }
        this.top--;
        return this.elem[this.top];
        /**
         * 此处只需要top--，而不是删除原始数据的原因是
         * 数据插入的位置是由top决定的
         * top--就表明，可以在当前栈顶继续存储数据
         * 新插入的数据，会覆盖原始数据
         * 省去了删除的操作
         */
    }

    /**
     * 弹出栈顶元素 不删除
     * @return
     */
    public int peek() {
        if (empty()) {
            //return -1;
            throw new RuntimeException("栈为空");
        }
        return this.elem[this.top-1];
    }

    public boolean empty() {
        return this.top == 0;
    }

    public int size() {
        return this.top;
    }

}
