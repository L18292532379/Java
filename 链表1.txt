class Node {
    public int val;
    public Node next;//Node node = new Node(); node储存的是对象的地址，类型是Node，所以next是Node类型。
    public Node(){

    }
    public Node(int val) {
        this.val = val;
    }
}
public class MylinkedList {
    public Node head;//表示当前链表的头

    public void createLinked() {
        this.head = new Node(12);
        Node node2 = new Node(22);
        Node node3 = new Node(32);
        Node node4 = new Node(42);
        this.head.next = node2;
        node2.next = node3;
        node3.next = node4;
    }

    public void display() {
        Node cur = this.head;
        while (cur != null) {
            System.out.println(cur.val);
            cur = cur.next;
        }
    }

    public Node findLastNode(){
        Node cur = this.head;
        while (cur.next != null){
            cur = cur.next;
        }
        return cur;
    }

    public Node findLastTwoNode(){
        if (this.head == null){
            System.out.println("链表为空");
            return null;
        }
        if (this.head.next == null){
            System.out.println("只有一个节点");
            return null;
        }
        Node cur = this.head;
        while (cur.next.next != null){
            cur = cur.next;
        }
        return cur;
    }

    public Node findN(int n){
        if (this.head == null){
            System.out.println("该链表为空");
            return null;
        }
        if (n <= 0){
            System.out.println("n太小了");
            return null;
        }
        if (n > size()){
            System.out.println("n太大了");
            return null;
        }
        Node cur = this.head;
        while (n > 1){
            cur = cur.next;
            n--;
        }
        return cur;
    }

    public int size(){
        Node cur = this.head;
        int count = 0;
        while (cur != null){
            cur = cur.next;
            count++;
        }
        return count;
    }

    public boolean contains(int key){
        Node cur = this.head;
        while (cur != null){
            if (cur.val == key){
                return true;
            }
            cur = cur.next;
        }
        return false;
    }
    //头插法
    public void addFirst(int data){
        /*0.创建一个节点
        Node node = new Node(data);
        1.判断 列表是不是空的
        if (this.head == null){
            this.head = node;
        }else {
            //2.插入
            node.next = this.head;
            this.head = node;
        }*/
        //优化之后
        //0.创建一个节点
        Node node = new Node(data);
        //1.插入
        node.next = this.head;
        this.head = node;
    }
    //尾插法
    public void addLast(int data){
        //0.new
        Node node = new Node(data);

        if (this.head == null){
             this.head = node;
        }else {
            //找尾巴
            Node cur = this.head;
            while (cur.next != null){
                cur = cur.next;
            }
            //插入
            cur.next = node;
        }

    }
    //找到index-1位置的节点的引用
    public Node moveIndex(int index) {
        Node cur = this.head;
        int count = 0;
        while (count != index-1) {
            cur = cur.next;
            count++;
        }
        return cur;
    }
    //任意位置插入，第一个数据节点为零号下标
    public void addIndex(int index,int data) {
        if (index < 0 || index > size()){
            System.out.println("index不合法");
            return;
        }
        if (index == 0){
            addFirst(data);
            return;
        }
        if (index == size()){
            addLast(data);
            return;
        }

        Node cur = moveIndex(index);
        //cur保存的是index-1位置的节点的引用
        Node node = new Node(data);
        node.next = cur.next;
        cur.next = node;
    }
}
